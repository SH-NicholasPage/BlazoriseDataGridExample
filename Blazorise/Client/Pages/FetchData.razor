@page "/fetchdata"
@using Blazorise.Shared
@using System.Text.Json
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Field>
        <FieldLabel>
            Edit Mode
        </FieldLabel>
        <FieldBody>
            <Select @bind-SelectedValue="@editMode">
                <SelectItem Value="DataGridEditMode.Form">Form</SelectItem>
                <SelectItem Value="DataGridEditMode.Inline">Inline</SelectItem>
                <SelectItem Value="DataGridEditMode.Popup">Popup</SelectItem>
            </Select>
        </FieldBody>
    </Field>

    <DataGrid TItem="WeatherForecast" Data="@forecasts" @bind-SelectedRow="@selectedForecast" Responsive Editable ShowPager CommandMode="DataGridCommandMode.ButtonRow"
          EditMode="editMode" RowInserting="@OnRowInserting" RowInserted="@OnRowInserted" RowRemoving="@OnRowRemoving">
        <DataGridColumns>
            <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="false" DeleteCommandAllowed="false">
                <SaveCommandTemplate>
                    <Button ElementId="btnSave" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
                </SaveCommandTemplate>
                <CancelCommandTemplate>
                    <Button ElementId="btnCancel" Color="Color.Secondary" Clicked="@context.Clicked">@context.LocalizationString</Button>
                </CancelCommandTemplate>
            </DataGridCommandColumn>
                <DataGridColumn Field="@nameof(WeatherForecast.Date)" Caption="Date" Sortable="true" />
                <DataGridColumn Field="@nameof(WeatherForecast.TemperatureC)" Caption="Temp. (C)" Editable />
                <DataGridColumn Field="@nameof(WeatherForecast.TemperatureF)" Caption="Temp. (F)" />
                <DataGridColumn Field="@nameof(WeatherForecast.Summary)" Caption="Summary" Editable />
        </DataGridColumns>
            <ButtonRowTemplate>
                <Button Color="Color.Success" Clicked="context.NewCommand.Clicked">New</Button>
                <Button Color="Color.Primary" Disabled="(selectedForecast is null)" Clicked="context.EditCommand.Clicked">Edit</Button>
                <Button Color="Color.Danger" Disabled="(selectedForecast is null)" Clicked="context.DeleteCommand.Clicked">Delete</Button>
                <Button Color="Color.Link" Clicked="context.ClearFilterCommand.Clicked">Clear Filter</Button>
        </ButtonRowTemplate>
    </DataGrid>
}

@code {
    private WeatherForecast? selectedForecast;
    private List<WeatherForecast>? forecasts;
    private DataGridEditMode editMode = DataGridEditMode.Form;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<List<WeatherForecast>>("WeatherForecast");
    }

    public void OnRowInserting(CancellableRowChange<WeatherForecast, Dictionary<String, Object>> e)
    {
        double tempC = Convert.ToDouble(e.Values[nameof(WeatherForecast.TemperatureC)]);//Not needed, but a good example
        e.Item.Date = DateTime.Now;
    }

    private async void OnRowInserted(SavedRowItem<WeatherForecast, Dictionary<string, object>> e)
    {
        HttpResponseMessage response = await Http.PostAsJsonAsync("WeatherForecast", e.Item);
    }

    private async void OnRowRemoving(CancellableRowChange<WeatherForecast> itemBeingRemoved)
    {
        int temp = forecasts!.IndexOf(itemBeingRemoved.Item);
        await Http.DeleteAsync("WeatherForecast?item=" + temp);
    }
}
